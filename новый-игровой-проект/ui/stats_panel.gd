extends Panel

@onready var player = get_tree().get_first_node_in_group("player")
@onready var level_label = $VBoxContainer/LevelContainer/LevelValue
@onready var stats_container = $VBoxContainer
@onready var upgrade_button = $VBoxContainer/UpgradeButton

func _ready():
	hide()
	# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
	if player and player.stats_updated.is_connected(update_stats):
		player.stats_updated.disconnect(update_stats)
	
	player = get_tree().get_first_node_in_group("player")
	if player:
		player.stats_updated.connect(update_stats)
		update_stats()

func update_stats():

	
	level_label.text = "–£—Ä–æ–≤–µ–Ω—å: %d" % player.current_level
	
	# –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—ã (–∫—Ä–æ–º–µ LevelContainer –∏ –∫–Ω–æ–ø–æ–∫)
	for child in stats_container.get_children():
		if child.name not in ["LevelContainer", "CloseButton", "UpgradeButton"]:
			child.queue_free()
	
	# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π health_component)
	var current_health = player.health if !player.health_component else player.health_component.current_health
	var max_health = player.health if !player.health_component else player.health_component.max_health
	
	add_stat_row("‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ", "%d/%d" % [current_health, max_health])
	add_stat_row("‚öî –ê—Ç–∞–∫–∞", str(player.attack))
	add_stat_row("üõ° –ë—Ä–æ–Ω—è", str(player.armor))
	add_stat_row("‚ö° –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "%d/%d" % [player.current_stamina, player.max_stamina])
	
	# –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	var physical_defense = (player.resistances["physical"]["from_stats"] + player.resistances["physical"]["from_armor"]) * 100
	add_stat_row("üõ° –§–∏–∑. –∑–∞—â–∏—Ç–∞", "%.1f%%" % physical_defense)
	add_stat_row("‚ò† –°–æ–ø—Ä. —è–¥–∞–º", "%.1f%%" % (player.resistances["poison"] * 100))
	add_stat_row("üîÆ –°–æ–ø—Ä. –º–∞–≥–∏–∏", "%.1f%%" % (player.resistances["magic"] * 100))
	
	# –ë–æ–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
	add_stat_row("üó° –°–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏", "+%.1f%%" % player.get_stat_bonus("attack_speed"))
	add_stat_row("üéØ –®–∞–Ω—Å –∫—Ä–∏—Ç–∞", "%.1f%%" % player.get_stat_bonus("crit_chance"))
	add_stat_row("üí• –ö—Ä–∏—Ç. —É—Ä–æ–Ω", "+%.1f%%" % player.get_stat_bonus("crit_damage"))
	add_stat_row("‚è± –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞", "-%.1f%%" % player.get_stat_bonus("cooldown_reduction"))

func add_stat_row(name: String, value: String):
	var row = HBoxContainer.new()
	row.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	var name_label = Label.new()
	name_label.text = name
	name_label.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	row.add_child(name_label)
	
	var value_label = Label.new()
	value_label.text = value
	value_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_RIGHT
	row.add_child(value_label)
	
	stats_container.add_child(row)

func _on_close_button_pressed():
	hide()

func _on_upgrade_button_pressed():
	get_tree().call_group("upgrade_panel", "show")

func _input(event):
	if event.is_action_pressed("stats_panel"):
		if visible:
			hide()
		else:
			if is_instance_valid(player):
				update_stats()
				show()
			else:
				push_error("Cannot show stats - player is invalid")

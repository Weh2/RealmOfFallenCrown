extends Panel

@onready var player = get_tree().get_first_node_in_group("player")
@onready var level_label = $VBoxContainer/LevelContainer/LevelValue
@onready var stats_container = $VBoxContainer
@onready var upgrade_button = $UpgradeButton
@onready var stat_tooltip = preload("res://ui/StatTooltip.tscn").instantiate()


func _ready():
	hide()
	if player:
		player.stats_updated.connect(update_stats)
		player.level_up.connect(_on_player_level_up)
		update_stats()
	add_child(stat_tooltip)
	stat_tooltip.hide()


func _on_player_level_up(_new_level: int):
	# –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
	upgrade_button.disabled = player.skill_points <= 0
	update_stats()

func update_stats():
	if !player: return
	
	# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
	upgrade_button.disabled = player.skill_points <= 0
	upgrade_button.visible = player.skill_points > 0  # –°–∫—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –æ—á–∫–æ–≤
	
	level_label.text = "–£—Ä–æ–≤–µ–Ω—å: %d" % player.current_level
	
	# –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—ã (–∫—Ä–æ–º–µ LevelContainer –∏ –∫–Ω–æ–ø–æ–∫)
	for child in stats_container.get_children():
		if child.name not in ["LevelContainer", "CloseButton", "UpgradeButton"]:
			child.queue_free()
	
	# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π health_component)
	var current_health = player.health if !player.health_component else player.health_component.current_health
	var max_health = player.health if !player.health_component else player.health_component.max_health
	
	add_stat_row("‚ù§ –ó–¥–æ—Ä–æ–≤—å–µ", "%d/%d" % [current_health, max_health])
	add_stat_row("‚öî –ê—Ç–∞–∫–∞", str(player.attack))
	add_stat_row("üõ° –ë—Ä–æ–Ω—è", str(player.armor))
	add_stat_row("‚ö° –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "%d/%d" % [player.current_stamina, player.max_stamina])
	
	# –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
	var physical_defense = (player.resistances["physical"]["from_stats"] + player.resistances["physical"]["from_armor"]) * 100
	add_stat_row("üõ° –§–∏–∑. –∑–∞—â–∏—Ç–∞", "%.1f%%" % physical_defense)
	add_stat_row("‚ò† –°–æ–ø—Ä. —è–¥–∞–º", "%.1f%%" % (player.resistances["poison"] * 100))
	add_stat_row("üîÆ –°–æ–ø—Ä. –º–∞–≥–∏–∏", "%.1f%%" % (player.resistances["magic"] * 100))
	
	# –ë–æ–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
	add_stat_row("üó° –°–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏", "+%.1f%%" % player.get_stat_bonus("attack_speed"))
	add_stat_row("üéØ –®–∞–Ω—Å –∫—Ä–∏—Ç–∞", "%.1f%%" % player.get_stat_bonus("crit_chance"))
	add_stat_row("üí• –ö—Ä–∏—Ç. —É—Ä–æ–Ω", "+%.1f%%" % player.get_stat_bonus("crit_damage"))
	add_stat_row("‚è± –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞", "-%.1f%%" % player.get_stat_bonus("cooldown_reduction"))

func add_stat_row(name: String, value: String, bonus: String = "", stat_name: String = ""):
	var row = HBoxContainer.new()
	row.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	var name_label = Label.new()
	name_label.text = name
	name_label.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	row.add_child(name_label)
	
	var value_label = Label.new()
	value_label.text = value
	value_label.horizontal_alignment = HORIZONTAL_ALIGNMENT_RIGHT
	row.add_child(value_label)
	
	if bonus != "":
		var bonus_label = Label.new()
		bonus_label.text = " (+%s)" % bonus
		bonus_label.modulate = Color.GREEN_YELLOW
		row.add_child(bonus_label)
	
	# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω stat_name
	if stat_name != "":
	# –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ª—è–º–±–¥–µ
		var tooltip_stat_name = stat_name
	
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏
		row.mouse_entered.connect(func():
			stat_tooltip.display(tooltip_stat_name)
		# –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞–¥ —Å—Ç—Ä–æ–∫–æ–π
			var pos = row.get_global_rect().position
			stat_tooltip.position = pos + Vector2(0, -stat_tooltip.size.y - 5)
	)
	
	# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ö–æ–¥–∞ –º—ã—à–∏
	row.mouse_exited.connect(func():
		stat_tooltip.hide()
	)
	
	stats_container.add_child(row)



func _on_close_button_pressed():
	hide()

func _on_upgrade_button_pressed():
	$UpgradePanel.show()
	$UpgradePanel.update_display()

func _input(event):
	if event.is_action_pressed("stats_panel"):
		if visible:
			hide()
		else:
			if is_instance_valid(player):
				update_stats()
				show()
			else:
				push_error("Cannot show stats - player is invalid")
